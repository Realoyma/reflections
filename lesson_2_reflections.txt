What happens when you initialize a repository? Why do you need to do it?

A repository is created with no commits. The repository is needed to be able to track commits made. 


How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory contains all the files while the saging area contains only the files from the working directory that will be committed. It creates an opportunity to verify the files to be committed.


How can you use the staging area to make sure you have one commit per logical change?

The staging area gives you the opportunity to view the files you want to commit and choose how to combine them logically


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful if you want to make experimental changes and testing it without affecting the main code

How do the diagrams help you visualize the branch structure?
It helps to identity where the branches occured, the commits made before the branch, within the branch and outside the branch (master).


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is you get one branch with the changes from both branches and their previous commit histories


Why do we represent it in the diagram the way we do?
    
 After a merge, all commits will be shown based on the imestamp in git log. This will show the commits from the two different branches running through each other.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Merging manually takes a long time
When merging automatically get combines the changes made from both commits and then identifies the particular lines of code that differ


Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.